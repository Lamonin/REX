Грамматика языка Ruby, написанная в EBNF форме.

Все нетерминалы заключены в угловые (<, >) скобки.
Все терминалы являются токенами лексера и заключены в двойные кавычки.

Уточнение:
	[A] - элемент A входит или не входит (условное вхождение)
	{A} - ноль или более элементов A (повторение)

<program>	=	<block>.

<new_line>	=	"NEWLINE" | "SEMICOLON".

<block>		=	<stmt> {<new_line> <stmt>}.

<stmt>		=	<if_stmt>
			|	<cycle_stmt>
			|	<func_def>
			|	"RETURN" <args>
		    |	"NEXT"
			|	"BREAK"
			|	<expression>.

<expression>=   <expression> "AND" <expression>
			|	<expression> "OR" <expression>
			|	"NOT" <expression>
			|	<arg>.


<func_def>	=	"FUNCTION" "ID" ["LPAR" ["ID" ["COMMA" "ID"]] "RPAR"] <new_line>
					<block>
				"END".

<func_call>	=	"ID" ["LPAR" [<args>] "RPAR"].

<lhs>		=	<variable>
			|	<variable> "LBR" <args> "RBR".

<arg>		=	<arg> "DOUBLE_DOT" <arg>
			|	<arg> <bin_op> <arg>
			|   <lhs> <asgn_op> <arg>
			|	"MINUS" <arg> | "PLUS" <arg>
			|	<primary>.

<primary>	=	<literal>
			|	<lhs>
			|	<func_call>
			|	"LBR" [args] "RBR". // Array definition

<if_stmt>	=	"IF" <expression> <then> <block>
				{"ELSIF" <expression> <then> <block>}
				["ELSE" <block>]
				"END".

<cycle_stmt>=	"WHILE" <expression> <do>
					<block>
				"END"
			|	"UNTIL" <expression> <do>
					<block>
				"END"
			|	"FOR" <variable> ["COMMA" <variable>] "IN" <expression> <do>
					<block>
				"END".

<args>		=	<arg> {"COMMA" <arg>}.

<then>		=	<new_line> | "THEN" | <new_line> "THEN".
<do>		=	<new_line> | "DO"	| <new_line> "DO".
			|
<bin_op>	=	"PLUS" | "MINUS" | "ASTERISK" | "SLASH" | "MOD" | "DEGREE"
			|	<comp_op>.

<asgn_op>	=	"EQUALS"
			|	"PLUS_EQUALS" | "MINUS_EQUALS"
			|	"ASTERISK_EQUALS" | "SLASH_EQUALS"
			|	"MOD_EQUALS" | "DEGREE_EQUALS".

<comp_op>	=	"GREATER" | "GREATER_EQUAL" | "LESS" | "LESS_EQUAL"
			|	"DOUBLE_EQUALS" | "NOT_EQUALS".

<variable>	=	"ID".

<literal>	=	<numeric> | <boolean> | "STRING" | "NIL".

<numeric>	=	"INTEGER" | "FLOAT".

<boolean>	=	"TRUE" | "FALSE".
